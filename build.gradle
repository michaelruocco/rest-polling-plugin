buildscript {
    configurations.classpath {
        resolutionStrategy {
            //this jgit version is required to fix this issue:
            //https://github.com/diffplug/spotless/issues/587 with the spotless plugin
            force 'org.eclipse.jgit:org.eclipse.jgit:5.7.0.202003110725-r'
        }
    }
}

plugins {
    id 'groovy'
    id 'java-gradle-plugin'
    id "jacoco"
    id "com.gradle.plugin-publish" version "0.13.0"
    id "com.diffplug.spotless" version "5.11.0"
    id "com.github.ben-manes.versions" version "0.38.0"
    id "pl.allegro.tech.build.axion-release" version "1.12.1"
    id "nebula.lint" version "16.17.1"
}

group "com.github.michaelruocco"

ext {
    slf4jVersion = "1.7.30"
    lombokVersion = "1.18.18"

    junitVersion = "5.7.1"
}

scmVersion {
    versionCreator "versionWithBranch"
    tag {
        prefix = "${name}"
    }
}
project.version = scmVersion.version

repositories {
    mavenCentral()
}

gradleLint {
    rules = ['all-dependency']
    alwaysRun = false
}

dependencies {
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "org.awaitility:awaitility:4.0.3"
    implementation "com.jayway.jsonpath:json-path:2.5.0"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.assertj:assertj-core:3.19.0"
    testImplementation "com.github.tomakehurst:wiremock-jre8:2.27.2"
    testCompile('org.spockframework:spock-core:2.0-M4-groovy-2.5') {
        exclude group: 'org.codehaus.groovy'
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
    systemProperty "org.slf4j.simpleLogger.defaultLogLevel", "debug"
    testLogging {
        events "failed"
        exceptionFormat "full"
        showStandardStreams true
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

def gitUrl = "https://github.com/michaelruocco/rest-polling-plugin"
pluginBundle {
    website = gitUrl
    vcsUrl = "${gitUrl}.git"
    description = 'Gradle plugin that enables polling of rest endpoints for a specific result'
    tags = ['rest', 'polling']
    version = project.version

    plugins {
        environmentPropertiesPlugin {
            id = 'com.github.michaelruocco.rest-polling'
            displayName = 'rest-polling-plugin'
        }
    }
}

spotless {
    groovy {
        importOrder()
    }
    java {
        removeUnusedImports()
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()

        replace 'Not enough space after if', 'if(', 'if ('
        replaceRegex 'Too much space after if', 'if +\\(', 'if ('

        replace 'Not enough space after for', 'for(', 'for ('
        replaceRegex 'Too much space after for', 'for +\\(', 'for ('

        replace 'Not enough space after while', 'while(', 'while ('
        replaceRegex 'Too much space after while', 'while +\\(', 'while ('
    }
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ["alpha", "beta", "rc", "cr", "m", "preview"].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject("Release candidate")
            }
        }
    }
}